import pytest
from webhooks.message_generator import MessageGenerator

def test_payment_success_messages_are_celebratory():
    """Test that payment success messages have a fun, celebratory tone"""
    generator = MessageGenerator()

    event = {"customer_name": "Acme Corp", "amount": "$500", "plan": "Pro"}

    message = generator.payment_success(event)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –≤–µ—Å–µ–ª—ã—Ö emoji
    assert any(emoji in message for emoji in ["üéâ", "üí∏", "üéä", "üöÄ", "üí™"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞
    celebratory_phrases = ["Woohoo", "Awesome", "Yay", "Sweet", "Nice one", "Ka-ching"]
    assert any(phrase in message for phrase in celebratory_phrases)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    assert event["customer_name"] in message
    assert event["amount"] in message


def test_payment_failure_messages_are_light_but_clear():
    """Test that payment failure messages maintain humor while being clear"""
    generator = MessageGenerator()

    event = {"customer_name": "Acme Corp", "amount": "$500", "reason": "card_expired"}

    message = generator.payment_failure(event)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π emoji
    assert any(emoji in message for emoji in ["üòÖ", "ü§î", "üëÄ", "üí≠"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª—ë–≥–∫–∞—è, –Ω–æ –ø–æ–Ω—è—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞
    light_phrases = ["Oops", "Uh-oh", "Looks like", "Seems like", "Hit a snag"]
    assert any(phrase in message for phrase in light_phrases)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—ë—Ç –æ—â—É—â–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    lower_message = message.lower()
    assert "needs attention" in lower_message or "needs looking at" in lower_message


def test_trial_ending_messages_are_encouraging():
    """Test that trial ending messages are encouraging and positive"""
    generator = MessageGenerator()

    event = {
        "customer_name": "Acme Corp",
        "trial_usage": "high",
        "popular_features": ["API", "Dashboard"],
    }

    message = generator.trial_ending(event)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π emoji
    assert any(emoji in message for emoji in ["‚ú®", "üåü", "üí´", "üöÄ"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –ª–µ–∫—Å–∏–∫–∞
    encouraging_phrases = [
        "loving",
        "crushing it",
        "rocking",
        "making the most of",
        "really getting into",
    ]
    assert any(phrase in message.lower() for phrase in encouraging_phrases)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    assert "API" in message or "Dashboard" in message


def test_upgrade_messages_are_extra_celebratory():
    """Test that upgrade messages are extra enthusiastic"""
    generator = MessageGenerator()

    event = {
        "customer_name": "Acme Corp",
        "old_plan": "Basic",
        "new_plan": "Pro",
        "team_size": 10,
    }

    message = generator.plan_upgrade(event)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö emoji
    emoji_count = sum(message.count(emoji) for emoji in ["üéâ", "üöÄ", "‚≠êÔ∏è", "üåü", "üí™"])
    assert emoji_count >= 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—Ä–∞–π–Ω–µ –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∞—è –ª–µ–∫—Å–∏–∫–∞
    enthusiastic_phrases = [
        "Awesome upgrade",
        "Leveled up",
        "Power up",
        "Supercharged",
        "Next level",
    ]
    assert any(phrase in message for phrase in enthusiastic_phrases)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —Ä–æ—Å—Ç/—É–ª—É—á—à–µ–Ω–∏–µ
    growth_phrases = ["growing", "scaling", "expanding", "moving up"]
    assert any(phrase in message.lower() for phrase in growth_phrases)


def test_messages_maintain_brand_voice():
    """Test that all messages maintain our brand voice regardless of situation"""
    generator = MessageGenerator()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    events = [
        {"type": "payment_success", "customer_name": "Acme"},
        {"type": "payment_failure", "customer_name": "Acme"},
        {"type": "trial_ending", "customer_name": "Acme"},
        {"type": "plan_upgrade", "customer_name": "Acme"},
    ]

    for event in events:
        message = generator.generate(event)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
        formal_phrases = [
            "Dear customer",
            "We regret to inform",
            "Please be advised",
            "Hereby",
            "Pursuant to",
        ]
        assert not any(phrase in message for phrase in formal_phrases)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω emoji –∏–∑ –æ–±—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ generator.ALL_EMOJI —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ emoji
        assert any(char in generator.ALL_EMOJI for char in message)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        assert event["customer_name"] in message

        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º (–º–µ–Ω—å—à–µ 50 —Å–ª–æ–≤)
        assert len(message.split()) < 50
