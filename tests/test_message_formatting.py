import pytest
from webhooks.models.notification import Notification, Section

#@pytest.mark.django_db
def test_payment_failure_message_structure():
    """Test that payment failure messages have the correct structure"""
    notification = Notification(
        title="Payment Failed",
        sections=[
            Section(
                title="Payment Details",
                fields={
                    "Amount": "$29.99",
                    "Status": "Failed",
                },
            ),
            Section(
                title="Customer Details",
                fields={
                    "Company": "Acme Corp",
                    "Team Size": "50",
                    "Plan": "Enterprise",
                },
            ),
        ],
        color="#dc3545",  # –ö—Ä–∞—Å–Ω—ã–π
        emoji="üö®",
    )

    # –ï—Å–ª–∏ Notification —è–≤–ª—è–µ—Ç—Å—è Django-–º–æ–¥–µ–ª—å—é, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–¥—ë—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±—ä–µ–∫—Ç, 
    # –ª–∏–±–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    assert notification.status == "failed"
    assert notification.color == "#dc3545"

    message = notification.to_slack_message()
    assert message["color"] == "#dc3545"
    assert len(message["blocks"]) == 3  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ + 2 —Å–µ–∫—Ü–∏–∏


#@pytest.mark.django_db
def test_trial_end_message_structure():
    """Test that trial end messages have the correct structure"""
    notification = Notification(
        title="Trial Ending Soon",
        sections=[
            Section(
                title="Trial Status",
                fields={
                    "Time Remaining": "7 days",
                    "Plan": "Enterprise",
                },
            ),
            Section(
                title="Customer Details",
                fields={
                    "Company": "Acme Corp",
                    "Team Size": "50",
                    "Plan": "Enterprise",
                },
            ),
        ],
        color="#ffc107",  # –ñ–µ–ª—Ç—ã–π
        emoji="üì¢",
    )

    assert notification.status == "warning"
    assert notification.color == "#ffc107"

    message = notification.to_slack_message()
    assert message["color"] == "#ffc107"
    assert len(message["blocks"]) == 3  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ + 2 —Å–µ–∫—Ü–∏–∏


#@pytest.mark.django_db
def test_message_color_by_type():
    """Test that message color is set based on event type"""
    failure_notification = Notification(
        title="Payment Failed",
        sections=[],
        color="#dc3545",  # –ö—Ä–∞—Å–Ω—ã–π
        emoji="üö®",
    )
    assert failure_notification.status == "failed"
    assert failure_notification.color == "#dc3545"

    success_notification = Notification(
        title="Payment Success",
        sections=[],
        color="#28a745",  # –ó–µ–ª—ë–Ω—ã–π
        emoji="‚úÖ",
    )
    assert success_notification.status == "success"
    assert success_notification.color == "#28a745"

    info_notification = Notification(
        title="Info Message",
        sections=[],
        color="#17a2b8",  # –°–∏–Ω–∏–π (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π)
        emoji="‚ÑπÔ∏è",
    )
    assert info_notification.status == "info"
    assert info_notification.color == "#17a2b8"


#@pytest.mark.django_db
def test_status_color_sync():
    """Test that status and color stay in sync"""
    notification = Notification(
        title="Test",
        sections=[],
    )

    # –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    notification.status = "success"
    assert notification.status == "success"
    assert notification.color == "#28a745"

    notification.status = "failed"
    assert notification.status == "failed"
    assert notification.color == "#dc3545"

    notification.status = "warning"
    assert notification.status == "warning"
    assert notification.color == "#ffc107"

    # –¢–µ—Å—Ç, —á—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (info)
    notification.status = "invalid"
    assert notification.status == "info"
    assert notification.color == "#17a2b8"


#@pytest.mark.django_db
def test_action_buttons():
    """Test that action buttons are properly formatted"""
    notification = Notification(
        title="Test",
        sections=[],
        action_buttons=[
            {"text": "View Details", "url": "#"},
            {"text": "Contact Support", "url": "#", "style": "primary"},
        ],
    )

    message = notification.to_slack_message()
    assert len(message["blocks"]) == 2  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    actions_block = message["blocks"][1]
    assert actions_block["type"] == "actions"
    assert len(actions_block["elements"]) == 2
    assert actions_block["elements"][0]["text"]["text"] == "View Details"
    assert actions_block["elements"][1]["style"] == "primary"
